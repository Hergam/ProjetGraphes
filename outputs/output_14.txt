Remplissage de la matrice des valeurs : 
0  ->  1  =  0
0  ->  2  =  0
1  ->  3  =  3
2  ->  3  =  2
4  ->  3  =  1
2  ->  4  =  2
3  ->  5  =  4


  Tâche  0    1    2    3    4    5
-------  ---  ---  ---  ---  ---  ---
      0  *    0    0    *    *    *
      1  *    *    *    3    *    *
      2  *    *    *    2    2    *
      3  *    *    *    *    *    4
      4  *    *    *    1    *    *
      5  *    *    *    *    *    *


DETECTION DE CIRCUIT : 
Méthode de suppression des sommets

Sommets restants :  [0, 1, 2, 3, 4, 5]
sommets supprimé(s) à cette itération :  [0]
Leur rang est : 0

Sommets restants :  [1, 2, 3, 4, 5]
sommets supprimé(s) à cette itération :  [1, 2]
Leur rang est : 1

Sommets restants :  [3, 4, 5]
sommets supprimé(s) à cette itération :  [4]
Leur rang est : 2

Sommets restants :  [3, 5]
sommets supprimé(s) à cette itération :  [3]
Leur rang est : 3

Sommets restants :  [5]
sommets supprimé(s) à cette itération :  [5]
Leur rang est : 4

Sommets restants :  []

pas de sommet supprimable a cette iteration, fin de l'algorithme

Il n'y a plus de sommets dans la liste des sommets restants, il n'y a donc pas de circuit dans ce graphe

Ce graphe ne contient pas d'arc a valeur négative



RANGS :
  r=0    r=1    r=2    r=3    r=4
-----  -----  -----  -----  -----
    0      1      4      3      5
           2


DATES AU PLUS TOT : 

création d'une liste de tout les sommets ordonnés par ordre de rangs : 
 [0, 1, 2, 4, 3, 5]

Sommet : 1
Prédécesseurs :  [0]
Prédécésseur ayant la d_tot+durée la plus petite est :  0
d_tot(sommet) =  0

Sommet : 2
Prédécesseurs :  [0]
Prédécésseur ayant la d_tot+durée la plus petite est :  0
d_tot(sommet) =  0

Sommet : 4
Prédécesseurs :  [2]
Prédécésseur ayant la d_tot+durée la plus petite est :  2
d_tot(sommet) =  2

Sommet : 3
Prédécesseurs :  [1, 2, 4]
Prédécésseur ayant la d_tot+durée la plus petite est :  4
d_tot(sommet) =  3

Sommet : 5
Prédécesseurs :  [3]
Prédécésseur ayant la d_tot+durée la plus petite est :  3
d_tot(sommet) =  7


DATES AU PLUS TARD : 

création d'une liste de tout les sommets ordonnés par ordre de rangs inverse : 
 [5, 3, 4, 1, 2, 0]

Sommet : 3
Succésseurs :  [5]
Succésseur ayant la d_tard la plus petite est :  5
d_tard(sommet) =  3

Sommet : 4
Succésseurs :  [3]
Succésseur ayant la d_tard la plus petite est :  3
d_tard(sommet) =  2

Sommet : 1
Succésseurs :  [3]
Succésseur ayant la d_tard la plus petite est :  3
d_tard(sommet) =  0

Sommet : 2
Succésseurs :  [3, 4]
Succésseur ayant la d_tard la plus petite est :  4
d_tard(sommet) =  0

Sommet : 0
Succésseurs :  [1, 2]
Succésseur ayant la d_tard la plus petite est :  2
d_tard(sommet) =  0


RÉCAPITULATIF DES MARGES :
  Tâche    D. au plus tôt    D. au plus tard    Marge Totale    Marge Libre
-------  ----------------  -----------------  --------------  -------------
      0                 0                  0               0              0
      1                 0                  0               0              0
      2                 0                  0               0              0
      3                 3                  3               0              0
      4                 2                  2               0              0
      5                 7                  7               0              0


CALCUL DES CHEMINS CRITIQUES :

On cherche d'abord tout les chemins existant (pas de détail car la trace deviendrai gigantesque pour certains tableaux de contraintes)

TOUT LES CHEMINS EXISTANTS : 
0 → 1 → 3 → 5
0 → 2 → 3 → 5
0 → 2 → 4 → 3 → 5

On supprime ensuite tout les chemins contenant au moins un sommet ayant une marge totale > 0 :

Chemins critiques :
0 → 1 → 3 → 5
0 → 2 → 3 → 5
0 → 2 → 4 → 3 → 5
